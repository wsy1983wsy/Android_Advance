1、OSI 七层模型， TCP/IP模型，HTTP格式
    OSI七层模型---->TCP/IP参考模型
    TCP/IP参考模型，四层：
        应用层----->HTTP HTTPS ...
        传输层----->Socket
2、OKHTTP使用
OKHttpClient 通过Builder创建
Request 创建request
RealCall implements Call
realCall.enqueue(new Call(){
synchronized (this) {
      if (executed) throw new IllegalStateException("Already Executed");
      executed = true;
}



梳理主线流程：
OkHttpClient --->Request -->newCall RealCall.enqueue(){不能重复读} ---> Dispatcher.enqueue(AsyncCall)
--->Dispatcher{if: 先加入运行队列里面，执行异步任务 else: 直接加入等待队列} --->异步任务 ---->AsyncCall execute{}
--->责任链模式 多个拦截器 ---->response



OKHttp的线程池：
  executorService().execute(call);---->
  public synchronized ExecutorService executorService() {
    if (executorService == null) {
      executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,
          new SynchronousQueue<Runnable>(), Util.threadFactory("OkHttp Dispatcher", false));
    }
    return executorService;
  }
  分析结果，OKHttp采用的是线程池的缓存方案 + 线程工厂

使用的设计模式：
  构建者模式 ，OKHttpClient Request 都是用了构建者模式
  责任链模式：
     final class AsyncCall extends NamedRunnable {
          @Override protected void execute() {
                Response response = getResponseWithInterceptorChain();
          }
     }
通过getResponseWithInterceptorChain获取到Response
  Response getResponseWithInterceptorChain() throws IOException {
    // Build a full stack of interceptors.
    List<Interceptor> interceptors = new ArrayList<>();
    interceptors.addAll(client.interceptors());
    interceptors.add(retryAndFollowUpInterceptor);
    interceptors.add(new BridgeInterceptor(client.cookieJar()));
    interceptors.add(new CacheInterceptor(client.internalCache()));
    interceptors.add(new ConnectInterceptor(client));
    if (!forWebSocket) {
      interceptors.addAll(client.networkInterceptors());
    }
    interceptors.add(new CallServerInterceptor(forWebSocket));

    Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,
        originalRequest, this, eventListener, client.connectTimeoutMillis(),
        client.readTimeoutMillis(), client.writeTimeoutMillis());

    return chain.proceed(originalRequest);
  }